<?xml version="1.0" encoding="utf-8"?>
<local:TestPointReadCompleted xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:local="clr-namespace:SalesEngCustomOrbitActivities;assembly=SalesEngCustomOrbitActivities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:njl="clr-namespace:Newtonsoft.Json.Linq;assembly=Newtonsoft.Json" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:sot="clr-namespace:SE.Orbit.TaskServices;assembly=SE.Orbit.Services.Core" xmlns:sowa="clr-namespace:SE.Orbit.Workflow.Activities;assembly=SE.Orbit.Workflow.Activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>SE.Orbit.TaskServices</x:String>
      <x:String>Newtonsoft.Json</x:String>
      <x:String>Newtonsoft.Json.Linq</x:String>
      <x:String>System.Net</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>NLog</AssemblyReference>
      <AssemblyReference>Nustache.Core</AssemblyReference>
      <AssemblyReference>SE.Orbit.Services.Core</AssemblyReference>
      <AssemblyReference>SE.Orbit.Workflow.Activities</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Configuration</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Net</AssemblyReference>
      <AssemblyReference>System.Net.Http</AssemblyReference>
      <AssemblyReference>System.Net.Http.Formatting</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>SalesEngCustomOrbitActivities</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <local:TestPointReadCompleted.Implementation>
    <Sequence>
      <Sequence.Variables>
        <Variable x:TypeArguments="sot:TaskResource" Name="CompletedTestPointTask" />
        <Variable x:TypeArguments="x:String" Name="CompletedByUpn" />
      </Sequence.Variables>
      <Assign>
        <Assign.To>
          <OutArgument x:TypeArguments="sot:TaskResource">
            <mca:CSharpReference x:TypeArguments="sot:TaskResource">CompletedTestPointTask</mca:CSharpReference>
          </OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="sot:TaskResource">
            <mca:CSharpValue x:TypeArguments="sot:TaskResource">CompletedTask</mca:CSharpValue>
          </InArgument>
        </Assign.Value>
      </Assign>
      <Sequence DisplayName="Add results to gis tables">
        <Sequence.Variables>
          <Variable x:TypeArguments="njl:JArray" Name="featuresFieldsJArray" />
          <Variable x:TypeArguments="scg:Dictionary(x:String, x:String)" Name="arguments" />
          <Variable x:TypeArguments="scg:Dictionary(x:String, x:Object)" Name="geometryDictionary" />
          <Variable x:TypeArguments="scg:Dictionary(x:String, x:Object)" Name="featuresFields" />
          <Variable x:TypeArguments="x:String" Default="http://63.253.242.153/arcgis/rest/services/Orbit/GasOrbit/FeatureServer/22/addFeatures" Name="TestPointTableUrl" />
          <Variable x:TypeArguments="x:String" Default="x" Name="xArgumentName" />
          <Variable x:TypeArguments="x:String" Default="y" Name="yArgumentName" />
          <Variable x:TypeArguments="x:String" Default="http://63.253.242.153/arcgis/rest/services/Orbit/GasOrbit/FeatureServer/5/addFeatures" Name="TestPointFeatureUrl" />
          <Variable x:TypeArguments="x:Int32" Name="CPReadTableRecordObjID" />
          <Variable x:TypeArguments="x:Int32" Name="CPReadFeatureObjID" />
        </Sequence.Variables>
        <Sequence DisplayName="Gather Feature Service inputs">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:String" Default="VOLTS" Name="voltArgumentName" />
            <Variable x:TypeArguments="x:String" Default="COMMENTS" Name="commentsArgumentName" />
            <Variable x:TypeArguments="x:String" Default="CPTestPoint_GlobalID" Name="globalIDArgumentName" />
          </Sequence.Variables>
          <Assign>
            <Assign.To>
              <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:String)">
                <mca:CSharpReference x:TypeArguments="scg:Dictionary(x:String, x:String)">arguments</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)">
                <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:String)">new Dictionary&lt;string,string&gt;()</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <AddToCollection x:TypeArguments="scg:KeyValuePair(x:String, x:String)" DisplayName="Add gdbVersion Argument">
            <AddToCollection.Item>
              <InArgument x:TypeArguments="scg:KeyValuePair(x:String, x:String)">
                <mca:CSharpValue x:TypeArguments="scg:KeyValuePair(x:String, x:String)">new KeyValuePair&lt;string, string&gt;("gdbVersion", "")</mca:CSharpValue>
              </InArgument>
            </AddToCollection.Item>
            <InArgument x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:String))">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:String))">arguments</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
          <AddToCollection x:TypeArguments="scg:KeyValuePair(x:String, x:String)" DisplayName="Add rollbackOnFailure Argument">
            <AddToCollection.Item>
              <InArgument x:TypeArguments="scg:KeyValuePair(x:String, x:String)">
                <mca:CSharpValue x:TypeArguments="scg:KeyValuePair(x:String, x:String)">new KeyValuePair&lt;string, string&gt;("rollbackOnFailure", "true")</mca:CSharpValue>
              </InArgument>
            </AddToCollection.Item>
            <InArgument x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:String))">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:String))">arguments</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
          <AddToCollection x:TypeArguments="scg:KeyValuePair(x:String, x:String)" DisplayName="Add f Argument">
            <AddToCollection.Item>
              <InArgument x:TypeArguments="scg:KeyValuePair(x:String, x:String)">
                <mca:CSharpValue x:TypeArguments="scg:KeyValuePair(x:String, x:String)">new KeyValuePair&lt;string, string&gt;("f", "json")</mca:CSharpValue>
              </InArgument>
            </AddToCollection.Item>
            <InArgument x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:String))">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:String))">arguments</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
          <Assign>
            <Assign.To>
              <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">
                <mca:CSharpReference x:TypeArguments="scg:Dictionary(x:String, x:Object)">featuresFields</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">
                <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:Object)">new Dictionary&lt;string,object&gt;()</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <AddToCollection x:TypeArguments="scg:KeyValuePair(x:String, x:Object)" DisplayName="AddVoltsArgument">
            <AddToCollection.Item>
              <InArgument x:TypeArguments="scg:KeyValuePair(x:String, x:Object)">
                <mca:CSharpValue x:TypeArguments="scg:KeyValuePair(x:String, x:Object)">new KeyValuePair&lt;string, object&gt;(voltArgumentName, CompletedTestPointTask.Properties["Volts"])</mca:CSharpValue>
              </InArgument>
            </AddToCollection.Item>
            <InArgument x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:Object))">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:Object))">featuresFields</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
          <AddToCollection x:TypeArguments="scg:KeyValuePair(x:String, x:Object)" DisplayName="AddCommentsArgument">
            <AddToCollection.Item>
              <InArgument x:TypeArguments="scg:KeyValuePair(x:String, x:Object)">
                <mca:CSharpValue x:TypeArguments="scg:KeyValuePair(x:String, x:Object)">new KeyValuePair&lt;string, object&gt;(commentsArgumentName, CompletedTestPointTask.Properties["Comments"].ToString())</mca:CSharpValue>
              </InArgument>
            </AddToCollection.Item>
            <InArgument x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:Object))">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:Object))">featuresFields</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
          <AddToCollection x:TypeArguments="scg:KeyValuePair(x:String, x:Object)" DisplayName="AddFacilityIDArgument">
            <AddToCollection.Item>
              <InArgument x:TypeArguments="scg:KeyValuePair(x:String, x:Object)">
                <mca:CSharpValue x:TypeArguments="scg:KeyValuePair(x:String, x:Object)">new KeyValuePair&lt;string, object&gt;("CPTestPoint_FacID", CompletedTestPointTask.Properties["FACILITYID"].ToString())</mca:CSharpValue>
              </InArgument>
            </AddToCollection.Item>
            <InArgument x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:Object))">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:Object))">featuresFields</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
          <local:GetTaskOwner>
            <local:GetTaskOwner.Result>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">CompletedByUpn</mca:CSharpReference>
              </OutArgument>
            </local:GetTaskOwner.Result>
            <local:GetTaskOwner.Task>
              <InArgument x:TypeArguments="sot:TaskResource">
                <mca:CSharpValue x:TypeArguments="sot:TaskResource">CompletedTestPointTask</mca:CSharpValue>
              </InArgument>
            </local:GetTaskOwner.Task>
          </local:GetTaskOwner>
          <AddToCollection x:TypeArguments="scg:KeyValuePair(x:String, x:Object)" DisplayName="AddReadByArgument">
            <AddToCollection.Item>
              <InArgument x:TypeArguments="scg:KeyValuePair(x:String, x:Object)">
                <mca:CSharpValue x:TypeArguments="scg:KeyValuePair(x:String, x:Object)">new KeyValuePair&lt;string, object&gt;("READBY", CompletedByUpn)</mca:CSharpValue>
              </InArgument>
            </AddToCollection.Item>
            <InArgument x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:Object))">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:Object))">featuresFields</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
          <AddToCollection x:TypeArguments="scg:KeyValuePair(x:String, x:Object)" DisplayName="AddReadDateArgument">
            <AddToCollection.Item>
              <InArgument x:TypeArguments="scg:KeyValuePair(x:String, x:Object)">
                <mca:CSharpValue x:TypeArguments="scg:KeyValuePair(x:String, x:Object)">new KeyValuePair&lt;string, object&gt;("READDATE", Convert.ToInt64((CompletedTestPointTask.CompletionDate.Value.ToUniversalTime() - new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds))</mca:CSharpValue>
              </InArgument>
            </AddToCollection.Item>
            <InArgument x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:Object))">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:Object))">featuresFields</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
          <AddToCollection x:TypeArguments="scg:KeyValuePair(x:String, x:Object)" DisplayName="AddReadingVoltsArgument">
            <AddToCollection.Item>
              <InArgument x:TypeArguments="scg:KeyValuePair(x:String, x:Object)">
                <mca:CSharpValue x:TypeArguments="scg:KeyValuePair(x:String, x:Object)">new KeyValuePair&lt;string, object&gt;("DateReading", Convert.ToString(CompletedTestPointTask.CompletionDate)+" ("+Convert.ToString(CompletedTestPointTask.Properties["Volts"])+")")</mca:CSharpValue>
              </InArgument>
            </AddToCollection.Item>
            <InArgument x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:Object))">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:Object))">featuresFields</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
          <AddToCollection x:TypeArguments="scg:KeyValuePair(x:String, x:Object)" DisplayName="AddCPTestPointGuidArgument">
            <AddToCollection.Item>
              <InArgument x:TypeArguments="scg:KeyValuePair(x:String, x:Object)">
                <mca:CSharpValue x:TypeArguments="scg:KeyValuePair(x:String, x:Object)">new KeyValuePair&lt;string,object&gt;(globalIDArgumentName, "{" + CompletedTestPointTask.Location.GlobalID.ToString() + "}")</mca:CSharpValue>
              </InArgument>
            </AddToCollection.Item>
            <InArgument x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:Object))">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:Object))">featuresFields</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
        </Sequence>
        <Assign>
          <Assign.To>
            <OutArgument x:TypeArguments="njl:JArray">
              <mca:CSharpReference x:TypeArguments="njl:JArray">featuresFieldsJArray</mca:CSharpReference>
            </OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="njl:JArray">
              <mca:CSharpValue x:TypeArguments="njl:JArray">new JArray()</mca:CSharpValue>
            </InArgument>
          </Assign.Value>
        </Assign>
        <AddToCollection x:TypeArguments="njl:JToken" DisplayName="AddToCollection&lt;JToken&gt;">
          <AddToCollection.Item>
            <InArgument x:TypeArguments="njl:JToken">
              <mca:CSharpValue x:TypeArguments="njl:JToken">JObject.Parse("{\"attributes\":" + JsonConvert.SerializeObject(featuresFields) + "}")</mca:CSharpValue>
            </InArgument>
          </AddToCollection.Item>
          <InArgument x:TypeArguments="scg:ICollection(njl:JToken)">
            <mca:CSharpValue x:TypeArguments="scg:ICollection(njl:JToken)">featuresFieldsJArray</mca:CSharpValue>
          </InArgument>
        </AddToCollection>
        <AddToCollection x:TypeArguments="scg:KeyValuePair(x:String, x:String)" DisplayName="Add features Argument">
          <AddToCollection.Item>
            <InArgument x:TypeArguments="scg:KeyValuePair(x:String, x:String)">
              <mca:CSharpValue x:TypeArguments="scg:KeyValuePair(x:String, x:String)">new KeyValuePair&lt;string, string&gt;("features", JsonConvert.SerializeObject(featuresFieldsJArray))</mca:CSharpValue>
            </InArgument>
          </AddToCollection.Item>
          <InArgument x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:String))">
            <mca:CSharpValue x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:String))">arguments</mca:CSharpValue>
          </InArgument>
        </AddToCollection>
        <WriteLine>
          <InArgument x:TypeArguments="x:String">
            <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">string.Join("&amp;",arguments.Select(x =&gt; string.Format("{0}={1}",
                WebUtility.UrlEncode(x.Key),
                WebUtility.UrlEncode(x.Value))))</mca:CSharpValue>
          </InArgument>
        </WriteLine>
        <local:PostToFormEncodedService DisplayName="Update CP Test Point Read Table">
          <local:PostToFormEncodedService.Arguments>
            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)">
              <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:String)">arguments</mca:CSharpValue>
            </InArgument>
          </local:PostToFormEncodedService.Arguments>
          <local:PostToFormEncodedService.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <mca:CSharpReference x:TypeArguments="x:Int32">CPReadTableRecordObjID</mca:CSharpReference>
            </OutArgument>
          </local:PostToFormEncodedService.Result>
          <local:PostToFormEncodedService.Url>
            <InArgument x:TypeArguments="x:Uri">
              <mca:CSharpValue x:TypeArguments="x:Uri">new Uri(TestPointTableUrl)</mca:CSharpValue>
            </InArgument>
          </local:PostToFormEncodedService.Url>
        </local:PostToFormEncodedService>
        <Sequence DisplayName="Create Geometry">
          <Assign>
            <Assign.To>
              <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">
                <mca:CSharpReference x:TypeArguments="scg:Dictionary(x:String, x:Object)">geometryDictionary</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">
                <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:Object)">new Dictionary&lt;string,object&gt;()</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <AddToCollection x:TypeArguments="scg:KeyValuePair(x:String, x:Object)" DisplayName="AddXArgument">
            <AddToCollection.Item>
              <InArgument x:TypeArguments="scg:KeyValuePair(x:String, x:Object)">
                <mca:CSharpValue x:TypeArguments="scg:KeyValuePair(x:String, x:Object)">new KeyValuePair&lt;string, object&gt;(xArgumentName, CompletedTestPointTask.Location.Gps.Lng.Value)</mca:CSharpValue>
              </InArgument>
            </AddToCollection.Item>
            <InArgument x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:Object))">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:Object))">geometryDictionary</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
          <AddToCollection x:TypeArguments="scg:KeyValuePair(x:String, x:Object)" DisplayName="AddYArgument">
            <AddToCollection.Item>
              <InArgument x:TypeArguments="scg:KeyValuePair(x:String, x:Object)">
                <mca:CSharpValue x:TypeArguments="scg:KeyValuePair(x:String, x:Object)">new KeyValuePair&lt;string,object&gt;(yArgumentName, CompletedTestPointTask.Location.Gps.Lat.Value)</mca:CSharpValue>
              </InArgument>
            </AddToCollection.Item>
            <InArgument x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:Object))">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:Object))">geometryDictionary</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
          <AddToCollection x:TypeArguments="scg:KeyValuePair(x:String, x:Object)" DisplayName="AddSpatialReferenceArgument">
            <AddToCollection.Item>
              <InArgument x:TypeArguments="scg:KeyValuePair(x:String, x:Object)">
                <mca:CSharpValue x:TypeArguments="scg:KeyValuePair(x:String, x:Object)">new KeyValuePair&lt;string, object&gt;("spatialReference", new Dictionary&lt;string,object&gt;{{"wkid",4326}})</mca:CSharpValue>
              </InArgument>
            </AddToCollection.Item>
            <InArgument x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:Object))">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:Object))">geometryDictionary</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
        </Sequence>
        <Assign>
          <Assign.To>
            <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:String)">
              <mca:CSharpReference x:TypeArguments="scg:Dictionary(x:String, x:String)">arguments</mca:CSharpReference>
            </OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)">
              <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:String)">new Dictionary&lt;string,string&gt;()</mca:CSharpValue>
            </InArgument>
          </Assign.Value>
        </Assign>
        <AddToCollection x:TypeArguments="scg:KeyValuePair(x:String, x:String)" DisplayName="Add gdbVersion Argument">
          <AddToCollection.Item>
            <InArgument x:TypeArguments="scg:KeyValuePair(x:String, x:String)">
              <mca:CSharpValue x:TypeArguments="scg:KeyValuePair(x:String, x:String)">new KeyValuePair&lt;string, string&gt;("gdbVersion", "")</mca:CSharpValue>
            </InArgument>
          </AddToCollection.Item>
          <InArgument x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:String))">
            <mca:CSharpValue x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:String))">arguments</mca:CSharpValue>
          </InArgument>
        </AddToCollection>
        <AddToCollection x:TypeArguments="scg:KeyValuePair(x:String, x:String)" DisplayName="Add rollbackOnFailure Argument">
          <AddToCollection.Item>
            <InArgument x:TypeArguments="scg:KeyValuePair(x:String, x:String)">
              <mca:CSharpValue x:TypeArguments="scg:KeyValuePair(x:String, x:String)">new KeyValuePair&lt;string, string&gt;("rollbackOnFailure", "true")</mca:CSharpValue>
            </InArgument>
          </AddToCollection.Item>
          <InArgument x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:String))">
            <mca:CSharpValue x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:String))">arguments</mca:CSharpValue>
          </InArgument>
        </AddToCollection>
        <AddToCollection x:TypeArguments="scg:KeyValuePair(x:String, x:String)" DisplayName="Add f Argument">
          <AddToCollection.Item>
            <InArgument x:TypeArguments="scg:KeyValuePair(x:String, x:String)">
              <mca:CSharpValue x:TypeArguments="scg:KeyValuePair(x:String, x:String)">new KeyValuePair&lt;string, string&gt;("f", "json")</mca:CSharpValue>
            </InArgument>
          </AddToCollection.Item>
          <InArgument x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:String))">
            <mca:CSharpValue x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:String))">arguments</mca:CSharpValue>
          </InArgument>
        </AddToCollection>
        <Assign>
          <Assign.To>
            <OutArgument x:TypeArguments="njl:JArray">
              <mca:CSharpReference x:TypeArguments="njl:JArray">featuresFieldsJArray</mca:CSharpReference>
            </OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="njl:JArray">
              <mca:CSharpValue x:TypeArguments="njl:JArray">new JArray()</mca:CSharpValue>
            </InArgument>
          </Assign.Value>
        </Assign>
        <AddToCollection x:TypeArguments="njl:JToken" DisplayName="AddToCollection&lt;JToken&gt;">
          <AddToCollection.Item>
            <InArgument x:TypeArguments="njl:JToken">
              <mca:CSharpValue x:TypeArguments="njl:JToken">JObject.Parse("{\"attributes\":" + JsonConvert.SerializeObject(featuresFields) + ",\"geometry\":" + JsonConvert.SerializeObject(geometryDictionary) + "}")</mca:CSharpValue>
            </InArgument>
          </AddToCollection.Item>
          <InArgument x:TypeArguments="scg:ICollection(njl:JToken)">
            <mca:CSharpValue x:TypeArguments="scg:ICollection(njl:JToken)">featuresFieldsJArray</mca:CSharpValue>
          </InArgument>
        </AddToCollection>
        <AddToCollection x:TypeArguments="scg:KeyValuePair(x:String, x:String)" DisplayName="Add features Argument">
          <AddToCollection.Item>
            <InArgument x:TypeArguments="scg:KeyValuePair(x:String, x:String)">
              <mca:CSharpValue x:TypeArguments="scg:KeyValuePair(x:String, x:String)">new KeyValuePair&lt;string, string&gt;("features", JsonConvert.SerializeObject(featuresFieldsJArray))</mca:CSharpValue>
            </InArgument>
          </AddToCollection.Item>
          <InArgument x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:String))">
            <mca:CSharpValue x:TypeArguments="scg:ICollection(scg:KeyValuePair(x:String, x:String))">arguments</mca:CSharpValue>
          </InArgument>
        </AddToCollection>
        <WriteLine>
          <InArgument x:TypeArguments="x:String">
            <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">string.Join("&amp;",arguments.Select(x =&gt; string.Format("{0}={1}",
                WebUtility.UrlEncode(x.Key),
                WebUtility.UrlEncode(x.Value))))</mca:CSharpValue>
          </InArgument>
        </WriteLine>
        <local:PostToFormEncodedService DisplayName="Update CP Test Point History Feature Class">
          <local:PostToFormEncodedService.Arguments>
            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)">
              <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:String)">arguments</mca:CSharpValue>
            </InArgument>
          </local:PostToFormEncodedService.Arguments>
          <local:PostToFormEncodedService.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <mca:CSharpReference x:TypeArguments="x:Int32">CPReadFeatureObjID</mca:CSharpReference>
            </OutArgument>
          </local:PostToFormEncodedService.Result>
          <local:PostToFormEncodedService.Url>
            <InArgument x:TypeArguments="x:Uri">
              <mca:CSharpValue x:TypeArguments="x:Uri">new Uri(TestPointFeatureUrl)</mca:CSharpValue>
            </InArgument>
          </local:PostToFormEncodedService.Url>
        </local:PostToFormEncodedService>
        <local:CreateFile>
          <local:CreateFile.FileName>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">".\\DemoItems\\" + CPReadFeatureObjID + ".featureOID"</mca:CSharpValue>
            </InArgument>
          </local:CreateFile.FileName>
        </local:CreateFile>
        <local:CreateFile>
          <local:CreateFile.FileName>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">".\\DemoItems\\" + CPReadTableRecordObjID + ".tableOID"</mca:CSharpValue>
            </InArgument>
          </local:CreateFile.FileName>
        </local:CreateFile>
      </Sequence>
      <Sequence DisplayName="Create GIS Edit Task">
        <Sequence.Variables>
          <Variable x:TypeArguments="sot:TaskResource" Name="GISEditTask" />
          <Variable x:TypeArguments="sot:TaskTypeResource" Name="TestPointTaskType" />
        </Sequence.Variables>
        <If>
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">CompletedTestPointTask.Redlines.Any()</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence>
              <sowa:ConstructTask TaskToCopyFrom="{x:Null}" TaskTypeName="GIS_Correction">
                <sowa:ConstructTask.Result>
                  <OutArgument x:TypeArguments="sot:TaskResource">
                    <mca:CSharpReference x:TypeArguments="sot:TaskResource">GISEditTask</mca:CSharpReference>
                  </OutArgument>
                </sowa:ConstructTask.Result>
              </sowa:ConstructTask>
              <sowa:AssignTaskToUser>
                <sowa:AssignTaskToUser.Task>
                  <InOutArgument x:TypeArguments="sot:TaskResource">
                    <mca:CSharpReference x:TypeArguments="sot:TaskResource">GISEditTask</mca:CSharpReference>
                  </InOutArgument>
                </sowa:AssignTaskToUser.Task>
                <sowa:AssignTaskToUser.Upn>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">CompletedTestPointTask.Properties["Inspector"].ToString()</mca:CSharpValue>
                  </InArgument>
                </sowa:AssignTaskToUser.Upn>
              </sowa:AssignTaskToUser>
              <local:CopyLocation>
                <local:CopyLocation.FromTask>
                  <InArgument x:TypeArguments="sot:TaskResource">
                    <mca:CSharpValue x:TypeArguments="sot:TaskResource">CompletedTestPointTask</mca:CSharpValue>
                  </InArgument>
                </local:CopyLocation.FromTask>
                <local:CopyLocation.ToTask>
                  <InOutArgument x:TypeArguments="sot:TaskResource">
                    <mca:CSharpReference x:TypeArguments="sot:TaskResource">GISEditTask</mca:CSharpReference>
                  </InOutArgument>
                </local:CopyLocation.ToTask>
              </local:CopyLocation>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Object">
                    <mca:CSharpReference x:TypeArguments="x:Object">GISEditTask.Properties["FieldInspector"]</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Object">
                    <mca:CSharpValue x:TypeArguments="x:Object">CompletedByUpn</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Object">
                    <mca:CSharpReference x:TypeArguments="x:Object">GISEditTask.Properties["Features"]</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Object">
                    <mca:CSharpValue x:TypeArguments="x:Object">CompletedTestPointTask.Properties["FacilityID"]</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Object">
                    <mca:CSharpReference x:TypeArguments="x:Object">GISEditTask.Properties["RequestDate"]</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Object">
                    <mca:CSharpValue x:TypeArguments="x:Object">CompletedTestPointTask.CompletionDate</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <local:GetTasksTaskType>
                <local:GetTasksTaskType.Result>
                  <OutArgument x:TypeArguments="sot:TaskTypeResource">
                    <mca:CSharpReference x:TypeArguments="sot:TaskTypeResource">TestPointTaskType</mca:CSharpReference>
                  </OutArgument>
                </local:GetTasksTaskType.Result>
                <local:GetTasksTaskType.Task>
                  <InArgument x:TypeArguments="sot:TaskResource">
                    <mca:CSharpValue x:TypeArguments="sot:TaskResource">CompletedTestPointTask</mca:CSharpValue>
                  </InArgument>
                </local:GetTasksTaskType.Task>
              </local:GetTasksTaskType>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Object">
                    <mca:CSharpReference x:TypeArguments="x:Object">GISEditTask.Properties["LayerName"]</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Object">
                    <mca:CSharpValue x:TypeArguments="x:Object">TestPointTaskType.LocationLayerDisplayName</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="s:Nullable(s:DateTime)">
                    <mca:CSharpReference x:TypeArguments="s:Nullable(s:DateTime)">GISEditTask.DueDate</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="s:Nullable(s:DateTime)">
                    <mca:CSharpValue x:TypeArguments="s:Nullable(s:DateTime)">new DateTime(2014,10,31)</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <sowa:SendTaskToOrbit>
                <sowa:SendTaskToOrbit.Task>
                  <InOutArgument x:TypeArguments="sot:TaskResource">
                    <mca:CSharpReference x:TypeArguments="sot:TaskResource">GISEditTask</mca:CSharpReference>
                  </InOutArgument>
                </sowa:SendTaskToOrbit.Task>
              </sowa:SendTaskToOrbit>
              <local:CopyRedlines>
                <local:CopyRedlines.FromTask>
                  <InArgument x:TypeArguments="sot:TaskResource">
                    <mca:CSharpValue x:TypeArguments="sot:TaskResource">CompletedTestPointTask</mca:CSharpValue>
                  </InArgument>
                </local:CopyRedlines.FromTask>
                <local:CopyRedlines.ToTask>
                  <InOutArgument x:TypeArguments="sot:TaskResource">
                    <mca:CSharpReference x:TypeArguments="sot:TaskResource">GISEditTask</mca:CSharpReference>
                  </InOutArgument>
                </local:CopyRedlines.ToTask>
              </local:CopyRedlines>
              <local:CreateFile>
                <local:CreateFile.FileName>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">".\\DemoItems\\" + GISEditTask.ID.ToString() + ".task"</mca:CSharpValue>
                  </InArgument>
                </local:CreateFile.FileName>
              </local:CreateFile>
            </Sequence>
          </If.Then>
        </If>
      </Sequence>
      <sads:DebugSymbol.Symbol>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</sads:DebugSymbol.Symbol>
    </Sequence>
  </local:TestPointReadCompleted.Implementation>
</local:TestPointReadCompleted>